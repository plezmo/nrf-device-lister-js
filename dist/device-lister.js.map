{"version":3,"file":"device-lister.js","sources":["../src/util/errors.js","../src/abstract-backend.js","../src/util/usb.js","../src/usb-backend.js","../src/util/board-versions.js","../src/serialport-backend.js","../src/jlink-backend.js","../src/device-lister.js"],"sourcesContent":["export default Object.freeze({\r\n    CANNOT_INSTANTIATE_ABSTRACTBACKEND: 0,\r\n    REENUMERATE_NOT_IMPLEMENTED: 1,\r\n    RECEIVED_NEITHER_SNO_NOR_ERROR: 2,\r\n    COULD_NOT_FETCH_SNO_FOR_PORT: 3,\r\n    NO_SERIAL_FROM_PC_NRFJPROGJS: 10,\r\n    LIBUSB_SUCCESS: 100,\r\n    LIBUSB_ERROR_IO: 101,\r\n    LIBUSB_ERROR_INVALID_PARAM: 102,\r\n    LIBUSB_ERROR_ACCESS: 103,\r\n    LIBUSB_ERROR_NO_DEVICE: 104,\r\n    LIBUSB_ERROR_NOT_FOUND: 105,\r\n    LIBUSB_ERROR_BUSY: 106,\r\n    LIBUSB_ERROR_TIMEOUT: 107,\r\n    LIBUSB_ERROR_OVERFLOW: 108,\r\n    LIBUSB_ERROR_PIPE: 109,\r\n    LIBUSB_ERROR_INTERRUPTED: 110,\r\n    LIBUSB_ERROR_NO_MEM: 111,\r\n    LIBUSB_ERROR_NOT_SUPPORTED: 112,\r\n    LIBUSB_ERROR_OTHER: 113,\r\n});\r\n","/* Copyright (c) 2010 - 2018, Nordic Semiconductor ASA\r\n *\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in the\r\n *    documentation and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of Nordic Semiconductor ASA nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport ErrorCodes from './util/errors';\r\n\r\nexport default class AbstractBackend {\r\n    constructor() {\r\n        if (this.constructor === AbstractBackend) {\r\n            const err = new Error('Cannot instantiate AbstractBackend.');\r\n            err.errorCode = ErrorCodes.CANNOT_INSTANTIATE_ABSTRACTBACKEND;\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    /*\r\n     * Implementations can optionally run some code whenever the device lister\r\n     * starts and stops listening for changes.\r\n     */\r\n    /* eslint-disable-next-line class-methods-use-this */\r\n    start() {}\r\n\r\n    /* eslint-disable-next-line class-methods-use-this */\r\n    stop() {}\r\n\r\n    /* Implementations must returns a `Promise` to an array of objects, like:\r\n     *\r\n     * [{\r\n     *   traits: ['foo', 'bar']\r\n     *   serialNumber: '1234',\r\n     *   backendData: {\r\n     *      serialNumber: '1234',\r\n     *      manufacturer: 'Arduino LLC (www.arduino.cc)',\r\n     *      devNode: '/dev/foobar'\r\n     *   }\r\n     * },{\r\n     *   error: new Error(...),\r\n     *   errorSource: \"Unique-ID-for-the-error-source\"\r\n     * }]\r\n     *\r\n     * These objects can either be devices with traits known by a specific\r\n     * backend, or errors that the backend wants to raise up.\r\n     *\r\n     * Devices with traits *must* have the `traits` and `serialNumber` properties,\r\n     * plus an optional property containing backend-specific data.\r\n     *\r\n     * Errors are synchronously raised upwards to the conflater, and must include\r\n     * a unique identifier for the source/reason of the error.\r\n     */\r\n    reenumerate() {\r\n        const err = new Error(`Reenumerate must be implemented in ${this.constructor.name}`);\r\n        err.errorCode = ErrorCodes.REENUMERATE_NOT_IMPLEMENTED;\r\n        throw err;\r\n    }\r\n}\r\n","/* Copyright (c) 2010 - 2018, Nordic Semiconductor ASA\r\n *\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in the\r\n *    documentation and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of Nordic Semiconductor ASA nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport Debug from 'debug';\r\n\r\nconst debug = Debug('device-lister:usb');\r\n\r\n/**\r\n * Perform a control transfer to get a string descriptor from an already\r\n * open usb device.\r\n *\r\n * @param {Object} device The usb device to get the descriptor for.\r\n * @param {number} index The index to get.\r\n * @returns {Promise} Promise that resolves with string descriptor.\r\n */\r\nfunction getStringDescriptor(device, index) {\r\n    return new Promise((res, rej) => {\r\n        device.getStringDescriptor(index, (err, data) => {\r\n            if (err) {\r\n                rej(err);\r\n            } else {\r\n                res(data);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Perform control transfers to get multiple string descriptors from an\r\n * already open usb device. Reading the descriptors in sequence, as\r\n * parallelizing this will produce random libusb errors.\r\n *\r\n * @param {Object} device The usb device to get the descriptors for.\r\n * @param {Array<number>} indexes The indexes to get.\r\n * @returns {Promise} Promise that resolves with array of string descriptors.\r\n */\r\nexport function getStringDescriptors(device, indexes) {\r\n    return indexes.reduce((prev, index) => (\r\n        prev.then(descriptorValues => (\r\n            getStringDescriptor(device, index)\r\n                .then(descriptorValue => [...descriptorValues, descriptorValue])\r\n        ))\r\n    ), Promise.resolve([]));\r\n}\r\n\r\n/**\r\n * Open a usb device.\r\n *\r\n * @param {Object} device The usb device to open.\r\n * @returns {Promise} Promise that resolves if successful, rejects if failed.\r\n */\r\nexport function openDevice(device) {\r\n    return new Promise((res, rej) => {\r\n        const tryOpen = (retries = 0) => {\r\n            try {\r\n                device.open();\r\n                res();\r\n            } catch (error) {\r\n                if (process.platform === 'win32' &&\r\n                    retries < 5 &&\r\n                    error.message === 'LIBUSB_ERROR_ACCESS') {\r\n                    // In win platforms, the winUSB driver might allow only one\r\n                    // process to access the USB device, potentially creating\r\n                    // race conditions. Mitigate this with an auto-retry mechanism.\r\n                    debug(`Got LIBUSB_ERROR_ACCESS on win32, retrying (attempt ${retries})...`);\r\n                    const delay = (50 * retries * retries) + (100 * Math.random());\r\n                    setTimeout(() => tryOpen(retries + 1), delay);\r\n                } else {\r\n                    rej(error);\r\n                }\r\n            }\r\n        };\r\n        tryOpen();\r\n    });\r\n}\r\n\r\n/**\r\n * Prefix a given number with 0x and pad with 4 zeroes.\r\n *\r\n * @param {Number} number The number to prefix and pad.\r\n * @returns {string} Prefixed and padded number.\r\n */\r\nexport function hexpad4(number) {\r\n    return `0x${number.toString(16).padStart(4, '0')}`;\r\n}\r\n\r\n/**\r\n * Get a string identifier for the given device. The identifier is on the\r\n * form \"busNumber.deviceAddress vendorId/producId\".\r\n *\r\n * @param {Object} device The device to get an ID for.\r\n * @returns {string} String ID for the given device.\r\n */\r\nexport function getDeviceId(device) {\r\n    const { busNumber, deviceAddress } = device;\r\n    const { idVendor, idProduct } = device.deviceDescriptor;\r\n    return `${busNumber}.${deviceAddress} ${hexpad4(idVendor)}/${hexpad4(idProduct)}`;\r\n}\r\n","/* Copyright (c) 2010 - 2018, Nordic Semiconductor ASA\r\n *\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in the\r\n *    documentation and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of Nordic Semiconductor ASA nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport Usb from 'usb';\r\nimport Debug from 'debug';\r\nimport { Mutex } from 'await-semaphore';\r\nimport AbstractBackend from './abstract-backend';\r\nimport { getStringDescriptors, openDevice, getDeviceId } from './util/usb';\r\nimport ErrorCodes from './util/errors';\r\n\r\nconst debug = Debug('device-lister:usb');\r\n\r\n// Module-wide mutex. Not the most efficient (prevents querying several USB devices\r\n// at once) but should do the trick. TODO: Replace this with a Map of mutexes\r\n// keyed by USB bus / USB address.\r\nconst mutex = new Mutex();\r\n\r\n/**\r\n * Given a device, runs it through the given filters, and returns an array of\r\n * the matching filter names.\r\n *\r\n * @param {Object} device The usb device to apply filters on.\r\n * @param {Object} filters Object with filter functions, keyed by filter name.\r\n * @returns {Array<String>} The filter names that returned a match on the device.\r\n */\r\nfunction getMatchingDeviceFilters(device, filters) {\r\n    const filterNames = Object.keys(filters);\r\n    return filterNames.map(filterName => {\r\n        if (filters[filterName](device)) {\r\n            return filterName;\r\n        }\r\n        return undefined;\r\n    }).filter(filterName => filterName);\r\n}\r\n\r\n\r\n/**\r\n * Given a libusb error, this function assigns the error argument an error code\r\n * representing the error type.\r\n *\r\n * @param {Object} err The error to assign an error code to.\r\n * @returns {Object} The error with a code assigned, given it is a libusb error.\r\n*/\r\nfunction decorateError(err) {\r\n    const error = err;\r\n    switch (error.message) {\r\n        case 'LIBUSB_SUCCESS': {\r\n            error.errorCode = ErrorCodes.LIBUSB_SUCCESS;\r\n            break;\r\n        }\r\n        case 'LIBUSB_ERROR_IO': {\r\n            error.errorCode = ErrorCodes.LIBUSB_ERROR_IO;\r\n            break;\r\n        }\r\n        case 'LIBUSB_ERROR_INVALID_PARAM': {\r\n            error.errorCode = ErrorCodes.LIBUSB_ERROR_INVALID_PARAM;\r\n            break;\r\n        }\r\n        case 'LIBUSB_ERROR_ACCESS': {\r\n            error.errorCode = ErrorCodes.LIBUSB_ERROR_ACCESS;\r\n            break;\r\n        }\r\n        case 'LIBUSB_ERROR_NO_DEVICE': {\r\n            error.errorCode = ErrorCodes.LIBUSB_ERROR_NO_DEVICE;\r\n            break;\r\n        }\r\n        case 'LIBUSB_ERROR_NOT_FOUND': {\r\n            error.errorCode = ErrorCodes.LIBUSB_ERROR_NOT_FOUND;\r\n            break;\r\n        }\r\n        case 'LIBUSB_ERROR_BUSY': {\r\n            error.errorCode = ErrorCodes.LIBUSB_ERROR_BUSY;\r\n            break;\r\n        }\r\n        case 'LIBUSB_ERROR_TIMEOUT': {\r\n            error.errorCode = ErrorCodes.LIBUSB_ERROR_TIMEOUT;\r\n            break;\r\n        }\r\n        case 'LIBUSB_ERROR_OVERFLOW': {\r\n            error.errorCode = ErrorCodes.LIBUSB_ERROR_OVERFLOW;\r\n            break;\r\n        }\r\n        case 'LIBUSB_ERROR_PIPE': {\r\n            error.errorCode = ErrorCodes.LIBUSB_ERROR_PIPE;\r\n            break;\r\n        }\r\n        case 'LIBUSB_ERROR_INTERRUPTED': {\r\n            error.errorCode = ErrorCodes.LIBUSB_ERROR_INTERRUPTED;\r\n            break;\r\n        }\r\n        case 'LIBUSB_ERROR_NO_MEM': {\r\n            error.errorCode = ErrorCodes.LIBUSB_ERROR_NO_MEM;\r\n            break;\r\n        }\r\n        case 'LIBUSB_ERROR_NOT_SUPPORTED': {\r\n            error.errorCode = ErrorCodes.LIBUSB_ERROR_NOT_SUPPORTED;\r\n            break;\r\n        }\r\n        case 'LIBUSB_ERROR_OTHER': {\r\n            error.errorCode = ErrorCodes.LIBUSB_ERROR_OTHER;\r\n            break;\r\n        }\r\n        default: {\r\n            break;\r\n        }\r\n    }\r\n    return error;\r\n}\r\n\r\n/**\r\n * Backend that enumerates usb devices.\r\n */\r\nexport default class UsbBackend extends AbstractBackend {\r\n    /*\r\n     * The constructor takes in two sets of filters. These must be objects,\r\n     * with strings as keys and functions as values. These functions must\r\n     * take an instance of a USB `Device` (closed or open, respectively)\r\n     * and return either a truthy or a falsy value.\r\n     *\r\n     */\r\n    constructor(closedDeviceFilters = {}, openDeviceFilters = {}) {\r\n        super();\r\n        this._closedDeviceFilters = closedDeviceFilters;\r\n        this._openDeviceFilters = openDeviceFilters;\r\n        this._cachedResults = new Map();\r\n        this._boundRemoveCachedResult = this._removeCachedResult.bind(this);\r\n    }\r\n\r\n    _removeCachedResult(device) {\r\n        const deviceId = getDeviceId(device);\r\n        debug('Removing from cache:', deviceId);\r\n        this._cachedResults.delete(deviceId);\r\n    }\r\n\r\n    /* Given an instance of a USB `Device`, returns a `Promise` to *one*\r\n     * structure like:\r\n     *\r\n     * {\r\n     *   traits: ['usb']\r\n     *   serialNumber: '1234',\r\n     *   usb: {\r\n     *      serialNumber: '1234',\r\n     *      manufacturer: 'Arduino LLC (www.arduino.cc)',\r\n     *      product: 'Development board model something'\r\n     *      device: (instance of usb's Device)\r\n     *   }\r\n     * }\r\n     *\r\n     * If the USB `Device` does not match any of the filters given to the\r\n     * class constructor, this will return a `Promise` to a falsy value instead.\r\n     */\r\n    _getResult(device) {\r\n        const deviceId = getDeviceId(device);\r\n        if (this._cachedResults.has(deviceId)) {\r\n            debug('Reading from cache:', deviceId);\r\n            return this._cachedResults.get(deviceId);\r\n        }\r\n\r\n        let result = {\r\n            serialNumber: undefined,\r\n            usb: {\r\n                serialNumber: undefined,\r\n                manufacturer: undefined,\r\n                product: undefined,\r\n                device,\r\n            },\r\n            traits: [],\r\n        };\r\n\r\n        result.traits = getMatchingDeviceFilters(device, this._closedDeviceFilters);\r\n        if (result.traits.length === 0) {\r\n            debug('No matching filters for device:', deviceId);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return mutex.use(() => {\r\n            debug('Mutex grabbed.');\r\n            return openDevice(device)\r\n                .then(() => {\r\n                    debug(`Opened: ${deviceId}`);\r\n                    return getStringDescriptors(device, [\r\n                        device.deviceDescriptor.iSerialNumber,\r\n                        device.deviceDescriptor.iManufacturer,\r\n                        device.deviceDescriptor.iProduct,\r\n                    ]).then(([serialNumber, manufacturer, product]) => {\r\n                        debug('Enumerated:', deviceId, [serialNumber, manufacturer, product]);\r\n                        result.serialNumber = serialNumber;\r\n                        result.usb.serialNumber = serialNumber;\r\n                        result.usb.manufacturer = manufacturer;\r\n                        result.usb.product = product;\r\n\r\n                        const traits = getMatchingDeviceFilters(device, this._openDeviceFilters);\r\n                        result.traits = result.traits.concat(traits);\r\n                    });\r\n                }).catch(error => {\r\n                    debug('Error when reading device:', deviceId, error.message);\r\n                    const err = decorateError(error);\r\n                    err.usb = device;\r\n                    result = {\r\n                        error: err,\r\n                        errorSource: deviceId,\r\n                    };\r\n                }).then(() => {\r\n                    // Clean up\r\n                    try {\r\n                        device.close();\r\n                    } catch (error) {\r\n                        debug('Error when closing device:', deviceId, error.message);\r\n                        if (!result.error) {\r\n                            const err = decorateError(error);\r\n                            err.usb = device;\r\n                            result = {\r\n                                error: err,\r\n                                errorSource: deviceId,\r\n                            };\r\n                        }\r\n                    }\r\n                    debug('Releasing mutex.');\r\n                    if (result.traits && result.traits.length === 0) {\r\n                        debug('No matching filters for device:', deviceId);\r\n                        return null;\r\n                    }\r\n                    debug('Adding to cache:', deviceId);\r\n                    this._cachedResults.set(deviceId, result);\r\n                    return result;\r\n                });\r\n        });\r\n    }\r\n\r\n    /* Returns a `Promise` to an array of objects, like:\r\n     *\r\n     * [{\r\n     *   traits: ['usb', 'nordicUsb']\r\n     *   serialNumber: '1234',\r\n     *   usb: {\r\n     *      serialNumber: '1234',\r\n     *      manufacturer: 'Arduino LLC (www.arduino.cc)',\r\n     *      product: 'Development board model something'\r\n     *      device: (instance of usb's Device)\r\n     *   }\r\n     * }]\r\n     *\r\n     * See https://doclets.io/node-serialport/node-serialport/master#dl-SerialPort-list\r\n     *\r\n     * If there were any errors while enumerating usb devices, the array will\r\n     * contain them, as per the AbstractBackend format.\r\n     */\r\n    reenumerate() {\r\n        debug('Reenumerating...');\r\n        return Promise.all(Usb.getDeviceList().map(device => this._getResult(device)))\r\n            .then(results => results.filter(result => result));\r\n    }\r\n\r\n    start() {\r\n        Usb.on('detach', this._boundRemoveCachedResult);\r\n    }\r\n\r\n    stop() {\r\n        Usb.removeListener('detach', this._boundRemoveCachedResult);\r\n    }\r\n}\r\n","export const BoardVersion = {\r\n    680: 'PCA10031',\r\n    681: 'PCA10028',\r\n    682: 'PCA10040',\r\n    683: 'PCA10056',\r\n    684: 'PCA10068',\r\n    686: 'PCA10064',\r\n    960: 'PCA10090',\r\n};\r\n\r\nexport const getBoardVersion = serialNumber => {\r\n    const sn = parseInt(serialNumber, 10).toString();\r\n    const digits = sn.substring(0, 3);\r\n    return BoardVersion[digits];\r\n};\r\n","/* Copyright (c) 2010 - 2018, Nordic Semiconductor ASA\r\n *\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in the\r\n *    documentation and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of Nordic Semiconductor ASA nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport SerialPort from 'serialport';\r\nimport Debug from 'debug';\r\nimport AbstractBackend from './abstract-backend';\r\nimport ErrorCodes from './util/errors';\r\nimport { getBoardVersion } from './util/board-versions';\r\n\r\nconst debug = Debug('device-lister:serialport');\r\n\r\n\r\nfunction getSerialPorts() {\r\n    return new Promise((resolve, reject) => {\r\n        SerialPort.list((err, ports) => {\r\n            if (err) {\r\n                reject(err);\r\n            } else {\r\n                resolve(ports);\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nexport default class SerialPortBackend extends AbstractBackend {\r\n    /* Returns a Promise to a list of objects, like:\r\n     *\r\n     * [{\r\n     *   traits: 'serialport'\r\n     *   serialNumber: '1234',\r\n     *   serialport: {\r\n     *      comName: 'COM3',\r\n     *      manufacturer: 'Arduino LLC (www.arduino.cc)',\r\n     *      serialNumber: '752303138333518011C1',\r\n     *      pnpId: 'USB\\\\VID_2341&PID_0043\\\\752303138333518011C1',\r\n     *      locationId: 'Port_#0003.Hub_#0001',\r\n     *      productId: '0043',\r\n     *      vendorId: '2341',\r\n     *      //serialport: (instance of SerialPort),         // Maybe???\r\n     *   }\r\n     * }]\r\n     *\r\n     * See https://doclets.io/node-serialport/node-serialport/master#dl-SerialPort-list\r\n     *\r\n     * If there were any errors while enumerating serial ports, it will return\r\n     * an array with just one error item, as per the AbstractBackend format.\r\n     *\r\n     * Serial ports without serial numbers will be converted into an error item\r\n     * each, as per the AbstractBackend format.\r\n     */\r\n    /* eslint-disable-next-line class-methods-use-this */\r\n    reenumerate() {\r\n        debug('Reenumerating...');\r\n        return getSerialPorts()\r\n            .then(ports => (\r\n                ports.map(port => {\r\n                    debug('Enumerated:', port.comName, port.serialNumber);\r\n                    if (port.serialNumber !== undefined) {\r\n                        return {\r\n                            serialNumber: port.serialNumber,\r\n                            serialport: port,\r\n                            boardVersion: getBoardVersion(port.serialNumber),\r\n                            traits: ['serialport'],\r\n                        };\r\n                    }\r\n                    const err = new Error(`Could not fetch serial number for serial port at ${port.comName}`);\r\n                    err.serialport = port;\r\n                    err.errorCode = ErrorCodes.COULD_NOT_FETCH_SNO_FOR_PORT;\r\n                    return {\r\n                        error: err,\r\n                        errorSource: `serialport-${port.comName}`,\r\n                    };\r\n                })\r\n            )).catch(error => {\r\n                debug('Error:', error);\r\n                return [{\r\n                    error,\r\n                    errorSource: 'serialport',\r\n                }];\r\n            });\r\n    }\r\n}\r\n","/* Copyright (c) 2010 - 2018, Nordic Semiconductor ASA\r\n *\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in the\r\n *    documentation and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of Nordic Semiconductor ASA nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport nrfjprogjs from 'pc-nrfjprog-js';\r\nimport Debug from 'debug';\r\nimport AbstractBackend from './abstract-backend';\r\nimport ErrorCodes from './util/errors';\r\nimport { getBoardVersion } from './util/board-versions';\r\n\r\nconst debug = Debug('device-lister:jlink');\r\n\r\nexport default class JlinkBackend extends AbstractBackend {\r\n    /* Returns a `Promise` to a list of objects, like:\r\n     *\r\n     * [{\r\n     *   traits: [\"jlink\"]\r\n     *   serialNumber: '1234',\r\n     * }]\r\n     *\r\n     * This relies on pc-nrfjprog-js, for more information see\r\n     * https://nordicsemiconductor.github.io/pc-nrfjprog-js/module-pc-nrfjprog-js.html#.getSerialNumbers\r\n     *\r\n     * Please note that the device information does *not* include things such as\r\n     * device family, or amount or RAM/ROM. This is because jlink/nrfjprog can only\r\n     * know which probes are there, but cannot know when a probe gets disconnected\r\n     * from a debug target and connected to another debug target.\r\n     *\r\n     * If there were any errors while enumerating segger probes, it will return\r\n     * an array with just one error item, as per the AbstractBackend format.\r\n     */\r\n    /* eslint-disable-next-line class-methods-use-this */\r\n    reenumerate() {\r\n        debug('Reenumerating...');\r\n        return new Promise((res, rej) => {\r\n            nrfjprogjs.getSerialNumbers((err, serialnumbers) => {\r\n                if (err) {\r\n                    const error = err;\r\n                    error.errorCode = ErrorCodes.NO_SERIAL_FROM_PC_NRFJPROGJS;\r\n                    rej(error);\r\n                } else {\r\n                    res(serialnumbers);\r\n                }\r\n            });\r\n        }).then(serialnumbers => serialnumbers.map(serialnumber => {\r\n            debug('Enumerated:', serialnumber);\r\n            return {\r\n                // The nrfjprogjs provides the serial numbers as integers, what we want\r\n                // is the serial number as described in the USB descriptor (iSerialNumber).\r\n                // The USB descriptor iSerialNumber attribute is of type string.\r\n                //\r\n                // Pad the serial number with '0' with the assumed serial number length of 12\r\n                serialNumber: serialnumber.toString().padStart(12, '0'),\r\n                boardVersion: getBoardVersion(serialnumber),\r\n                traits: ['jlink'],\r\n            };\r\n        })).catch(err => {\r\n            debug('Error:', err.errmsg);\r\n            return [{\r\n                error: err,\r\n                errorSource: 'jlink',\r\n            }];\r\n        });\r\n    }\r\n}\r\n","/* Copyright (c) 2010 - 2018, Nordic Semiconductor ASA\r\n *\r\n * All rights reserved.\r\n *\r\n * Redistribution and use in source and binary forms, with or without\r\n * modification, are permitted provided that the following conditions are met:\r\n *\r\n * 1. Redistributions of source code must retain the above copyright notice, this\r\n *    list of conditions and the following disclaimer.\r\n *\r\n * 2. Redistributions in binary form must reproduce the above copyright\r\n *    notice, this list of conditions and the following disclaimer in the\r\n *    documentation and/or other materials provided with the distribution.\r\n *\r\n * 3. Neither the name of Nordic Semiconductor ASA nor the names of its\r\n *    contributors may be used to endorse or promote products derived from this\r\n *    software without specific prior written permission.\r\n *\r\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n * IMPLIED WARRANTIES OF MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE\r\n * ARE DISCLAIMED. IN NO EVENT SHALL NORDIC SEMICONDUCTOR ASA OR CONTRIBUTORS BE\r\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\r\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\r\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\r\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\r\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\r\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\r\n * POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\nimport EventEmitter from 'events';\r\nimport Usb from 'usb';\r\nimport Debug from 'debug';\r\nimport UsbBackend from './usb-backend';\r\nimport SerialPortBackend from './serialport-backend';\r\nimport JlinkBackend from './jlink-backend';\r\nimport ErrorCodes from './util/errors';\r\nimport { getBoardVersion } from './util/board-versions';\r\n\r\nconst debug = Debug('device-lister:conflater');\r\n\r\nconst SEGGER_VENDOR_ID = 0x1366;\r\nconst NORDIC_VENDOR_ID = 0x1915;\r\n\r\nexport default class DeviceLister extends EventEmitter {\r\n    constructor(traits = {}) {\r\n        super();\r\n\r\n        debug('Instantiating DeviceLister with traits:', traits);\r\n\r\n        // Caches\r\n        this._currentDevices = new Map();\r\n        this._currentErrors = new Set();\r\n\r\n        // State for throttling down reenumerations\r\n        this._activeReenumeration = false; // Promise or false\r\n        this._queuedReenumeration = false; // Boolean\r\n\r\n\r\n        this._backends = [];\r\n\r\n        const {\r\n            usb, nordicUsb, nordicDfu, seggerUsb, jlink, serialport,\r\n        } = traits;\r\n\r\n        const usbDeviceClosedFilters = {};\r\n        const usbDeviceOpenFilters = {};\r\n        if (usb) { usbDeviceClosedFilters.usb = () => true; }\r\n        if (nordicUsb) {\r\n            usbDeviceClosedFilters.nordicUsb = device => (\r\n                device.deviceDescriptor.idVendor === NORDIC_VENDOR_ID\r\n            );\r\n        }\r\n        if (seggerUsb) {\r\n            usbDeviceClosedFilters.seggerUsb = device => (\r\n                device.deviceDescriptor.idVendor === SEGGER_VENDOR_ID\r\n            );\r\n        }\r\n        if (nordicDfu) {\r\n            usbDeviceOpenFilters.nordicDfu = device =>\r\n                device.deviceDescriptor.idVendor === NORDIC_VENDOR_ID &&\r\n                device.interfaces.some(iface => (\r\n                    iface.descriptor.bInterfaceClass === 255 &&\r\n                    iface.descriptor.bInterfaceSubClass === 1 &&\r\n                    iface.descriptor.bInterfaceProtocol === 1\r\n                ));\r\n        }\r\n\r\n        if (Object.keys(usbDeviceClosedFilters).length > 0 ||\r\n            Object.keys(usbDeviceOpenFilters).length > 0) {\r\n            this._backends.push(new UsbBackend(usbDeviceClosedFilters, usbDeviceOpenFilters));\r\n        }\r\n        if (serialport) { this._backends.push(new SerialPortBackend()); }\r\n        if (jlink) { this._backends.push(new JlinkBackend()); }\r\n\r\n        this._boundReenumerate = this._triggerReenumeration.bind(this);\r\n    }\r\n\r\n    start() {\r\n        debug('Attaching event listeners for USB attach/detach');\r\n\r\n        Usb.on('attach', this._boundReenumerate);\r\n        Usb.on('detach', this._boundReenumerate);\r\n\r\n        this._backends.forEach(backend => backend.start());\r\n\r\n        this.reenumerate();\r\n    }\r\n\r\n    // Stop listening to attach/detach events from USB\r\n    // Needed to let programs exit gracefully\r\n    stop() {\r\n        debug('Removing event listeners for USB attach/detach');\r\n\r\n        this._backends.forEach(backend => backend.stop());\r\n\r\n        Usb.removeListener('attach', this._boundReenumerate);\r\n        Usb.removeListener('detach', this._boundReenumerate);\r\n    }\r\n\r\n    static get devices() {\r\n        return Object.this._currentDevices;\r\n    }\r\n\r\n    reenumerate() {\r\n        // Ask all backends to reenumerate the devices they can see,\r\n        // then (and only then) conflate everything\r\n\r\n        debug('Asking all backends to reenumerate');\r\n\r\n        const pendings = this._backends.map(backend => backend.reenumerate());\r\n\r\n        return Promise.all(pendings)\r\n            .then(backendsResult => this._conflate(backendsResult))\r\n            .catch(err => {\r\n                debug('Error after reenumerating: ', err);\r\n                this.emit('error', err);\r\n            });\r\n    }\r\n\r\n\r\n    // Called on the USB attach/detach events, throttles down calls to reenumerate()\r\n    // Only one reenumeration will be active at any one time - if any reenumerations\r\n    // are triggered by events when there is one already active, the first one\r\n    // will be queued and delayed until the active one is finished, the rest\r\n    // will be silently ignored.\r\n    _triggerReenumeration(usbDevice) {\r\n        debug(`Called _triggerReenumeration because of added/removed USB device VID/PID 0x${\r\n            usbDevice.deviceDescriptor.idVendor.toString(16).padStart(4, '0')}/0x${\r\n            usbDevice.deviceDescriptor.idProduct.toString(16).padStart(4, '0')}`);\r\n\r\n        if (!this._activeReenumeration) {\r\n            debug('Calling reenumerate().');\r\n            this._activeReenumeration = this.reenumerate().then(() => {\r\n                this._activeReenumeration = false;\r\n            });\r\n        } else if (!this._queuedReenumeration) {\r\n            debug('Queuing one reenumeration.');\r\n            this._queuedReenumeration = true;\r\n\r\n            this._activeReenumeration.then(() => {\r\n                debug('Previous reenumeration done, triggering queued one.');\r\n\r\n                this._activeReenumeration = this.reenumerate().then(() => {\r\n                    this._activeReenumeration = false;\r\n                });\r\n                this._queuedReenumeration = false;\r\n            });\r\n        } else {\r\n            debug('Skipping spurious reenumeration request.');\r\n        }\r\n    }\r\n\r\n\r\n    _conflate(backendsResult) {\r\n        debug('All backends have re-enumerated, conflating...');\r\n\r\n        const deviceMap = new Map();\r\n        const newErrors = new Set();\r\n\r\n        backendsResult.forEach(results => {\r\n            results.forEach(result => {\r\n                if (result.serialNumber) {\r\n                    const { serialNumber } = result;\r\n\r\n                    let device = deviceMap.get(serialNumber) || {};\r\n                    const { traits } = device;\r\n\r\n                    // fix the result by renaming serialport object to\r\n                    // serialport.1 for the 2nd port, serialport.2 for the 3rd...\r\n                    // before merging it to the final device object\r\n                    const fixedResult = result;\r\n                    if (fixedResult.serialport) {\r\n                        const n = Object.keys(device).filter(k => k.startsWith('serialport')).length;\r\n                        if (n > 0) {\r\n                            fixedResult[`serialport.${n}`] = result.serialport;\r\n                            delete fixedResult.serialport;\r\n                        }\r\n                    }\r\n\r\n                    device = Object.assign({}, device, fixedResult);\r\n                    if (traits && !traits.includes(result.traits[0])) {\r\n                        device.traits = result.traits.concat(traits);\r\n                    }\r\n                    deviceMap.set(serialNumber, device);\r\n                } else if (result.errorSource) {\r\n                    if (!this._currentErrors.has(result.errorSource)) {\r\n                        this.emit('error', result.error);\r\n                    }\r\n                    newErrors.add(result.errorSource);\r\n                } else {\r\n                    const err = new Error(`Received neither serial number nor error! ${result}`);\r\n                    err.errorCode = ErrorCodes.RECEIVED_NEITHER_SNO_NOR_ERROR;\r\n                    throw err;\r\n                }\r\n            });\r\n        });\r\n\r\n        this._currentErrors = newErrors;\r\n\r\n        debug(`Conflated. Now ${Array.from(deviceMap).length} devices with known serial number and ${Array.from(this._currentErrors).length} without.`);\r\n        this._currentDevices = deviceMap;\r\n        this.emit('conflated', deviceMap);\r\n        return deviceMap;\r\n    }\r\n}\r\nDeviceLister.ErrorCodes = ErrorCodes;\r\nDeviceLister.getBoardVersion = getBoardVersion;\r\n"],"names":["const","debug","Mutex","super","let","this"],"mappings":"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"}